// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/07/2022 21:48:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Block2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Block2_vlg_sample_tst(
	clk,
	Enable,
	reset,
	rst_on,
	store,
	windows,
	sampler_tx
);
input  clk;
input  Enable;
input  reset;
input  rst_on;
input  store;
input  windows;
output sampler_tx;

reg sample;
time current_time;
always @(clk or Enable or reset or rst_on or store or windows)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Block2_vlg_check_tst (
	Led_Blue,
	Led_Green,
	Led_Red,
	sampler_rx
);
input  Led_Blue;
input  Led_Green;
input  Led_Red;
input sampler_rx;

reg  Led_Blue_expected;
reg  Led_Green_expected;
reg  Led_Red_expected;

reg  Led_Blue_prev;
reg  Led_Green_prev;
reg  Led_Red_prev;

reg  Led_Blue_expected_prev;
reg  Led_Green_expected_prev;
reg  Led_Red_expected_prev;

reg  last_Led_Blue_exp;
reg  last_Led_Green_exp;
reg  last_Led_Red_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Led_Blue_prev = Led_Blue;
	Led_Green_prev = Led_Green;
	Led_Red_prev = Led_Red;
end

// update expected /o prevs

always @(trigger)
begin
	Led_Blue_expected_prev = Led_Blue_expected;
	Led_Green_expected_prev = Led_Green_expected;
	Led_Red_expected_prev = Led_Red_expected;
end



// expected Led_Blue
initial
begin
	Led_Blue_expected = 1'bX;
end 

// expected Led_Green
initial
begin
	Led_Green_expected = 1'bX;
end 

// expected Led_Red
initial
begin
	Led_Red_expected = 1'bX;
end 
// generate trigger
always @(Led_Blue_expected or Led_Blue or Led_Green_expected or Led_Green or Led_Red_expected or Led_Red)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Led_Blue = %b | expected Led_Green = %b | expected Led_Red = %b | ",Led_Blue_expected_prev,Led_Green_expected_prev,Led_Red_expected_prev);
	$display("| real Led_Blue = %b | real Led_Green = %b | real Led_Red = %b | ",Led_Blue_prev,Led_Green_prev,Led_Red_prev);
`endif
	if (
		( Led_Blue_expected_prev !== 1'bx ) && ( Led_Blue_prev !== Led_Blue_expected_prev )
		&& ((Led_Blue_expected_prev !== last_Led_Blue_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_Blue :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_Blue_expected_prev);
		$display ("     Real value = %b", Led_Blue_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Led_Blue_exp = Led_Blue_expected_prev;
	end
	if (
		( Led_Green_expected_prev !== 1'bx ) && ( Led_Green_prev !== Led_Green_expected_prev )
		&& ((Led_Green_expected_prev !== last_Led_Green_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_Green :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_Green_expected_prev);
		$display ("     Real value = %b", Led_Green_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Led_Green_exp = Led_Green_expected_prev;
	end
	if (
		( Led_Red_expected_prev !== 1'bx ) && ( Led_Red_prev !== Led_Red_expected_prev )
		&& ((Led_Red_expected_prev !== last_Led_Red_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_Red :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_Red_expected_prev);
		$display ("     Real value = %b", Led_Red_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Led_Red_exp = Led_Red_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Block2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg Enable;
reg reset;
reg rst_on;
reg store;
reg windows;
// wires                                               
wire Led_Blue;
wire Led_Green;
wire Led_Red;

wire sampler;                             

// assign statements (if any)                          
Block2 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.Enable(Enable),
	.Led_Blue(Led_Blue),
	.Led_Green(Led_Green),
	.Led_Red(Led_Red),
	.reset(reset),
	.rst_on(rst_on),
	.store(store),
	.windows(windows)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// Enable
initial
begin
	Enable = 1'b1;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #10000 1'b0;
end 

// rst_on
initial
begin
	rst_on = 1'b1;
	rst_on = #10000 1'b0;
end 

// store
initial
begin
	repeat(8)
	begin
		store = 1'b0;
		store = #60000 1'b1;
		# 60000;
	end
	store = 1'b0;
end 

// windows
initial
begin
	windows = 1'b1;
end 

Block2_vlg_sample_tst tb_sample (
	.clk(clk),
	.Enable(Enable),
	.reset(reset),
	.rst_on(rst_on),
	.store(store),
	.windows(windows),
	.sampler_tx(sampler)
);

Block2_vlg_check_tst tb_out(
	.Led_Blue(Led_Blue),
	.Led_Green(Led_Green),
	.Led_Red(Led_Red),
	.sampler_rx(sampler)
);
endmodule

