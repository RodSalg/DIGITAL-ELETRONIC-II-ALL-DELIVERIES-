// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/16/2022 00:41:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    dsf_timer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module dsf_timer_vlg_sample_tst(
	areset,
	clk,
	data,
	enable,
	pos_neg,
	trigger,
	sampler_tx
);
input  areset;
input  clk;
input [3:0] data;
input  enable;
input  pos_neg;
input  trigger;
output sampler_tx;

reg sample;
time current_time;
always @(areset or clk or data or enable or pos_neg or trigger)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module dsf_timer_vlg_check_tst (
	count,
	q,
	sampler_rx
);
input [3:0] count;
input  q;
input sampler_rx;

reg [3:0] count_expected;
reg  q_expected;

reg [3:0] count_prev;
reg  q_prev;

reg [3:0] count_expected_prev;
reg  q_expected_prev;

reg [3:0] last_count_exp;
reg  last_q_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	count_prev = count;
	q_prev = q;
end

// update expected /o prevs

always @(trigger)
begin
	count_expected_prev = count_expected;
	q_expected_prev = q_expected;
end



// expected q
initial
begin
	q_expected = 1'bX;
end 
// expected count[ 3 ]
initial
begin
	count_expected[3] = 1'bX;
end 
// expected count[ 2 ]
initial
begin
	count_expected[2] = 1'bX;
end 
// expected count[ 1 ]
initial
begin
	count_expected[1] = 1'bX;
end 
// expected count[ 0 ]
initial
begin
	count_expected[0] = 1'bX;
end 
// generate trigger
always @(count_expected or count or q_expected or q)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected count = %b | expected q = %b | ",count_expected_prev,q_expected_prev);
	$display("| real count = %b | real q = %b | ",count_prev,q_prev);
`endif
	if (
		( count_expected_prev[0] !== 1'bx ) && ( count_prev[0] !== count_expected_prev[0] )
		&& ((count_expected_prev[0] !== last_count_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[0] = count_expected_prev[0];
	end
	if (
		( count_expected_prev[1] !== 1'bx ) && ( count_prev[1] !== count_expected_prev[1] )
		&& ((count_expected_prev[1] !== last_count_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[1] = count_expected_prev[1];
	end
	if (
		( count_expected_prev[2] !== 1'bx ) && ( count_prev[2] !== count_expected_prev[2] )
		&& ((count_expected_prev[2] !== last_count_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[2] = count_expected_prev[2];
	end
	if (
		( count_expected_prev[3] !== 1'bx ) && ( count_prev[3] !== count_expected_prev[3] )
		&& ((count_expected_prev[3] !== last_count_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[3] = count_expected_prev[3];
	end
	if (
		( q_expected_prev !== 1'bx ) && ( q_prev !== q_expected_prev )
		&& ((q_expected_prev !== last_q_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_q_exp = q_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module dsf_timer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg areset;
reg clk;
reg [3:0] data;
reg enable;
reg pos_neg;
reg trigger;
// wires                                               
wire [3:0] count;
wire q;

wire sampler;                             

// assign statements (if any)                          
dsf_timer i1 (
// port map - connection between master ports and signals/registers   
	.areset(areset),
	.clk(clk),
	.count(count),
	.data(data),
	.enable(enable),
	.pos_neg(pos_neg),
	.q(q),
	.trigger(trigger)
);

// enable
initial
begin
	enable = 1'b1;
end 

// areset
initial
begin
	areset = 1'b1;
	areset = #20000 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b1;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
end 

// trigger
initial
begin
	trigger = 1'b0;
	trigger = #30000 1'b1;
	trigger = #10000 1'b0;
	trigger = #70000 1'b1;
	trigger = #10000 1'b0;
	trigger = #60000 1'b1;
	trigger = #10000 1'b0;
	trigger = #10000 1'b1;
	trigger = #70000 1'b0;
	trigger = #10000 1'b1;
end 

// pos_neg
initial
begin
	pos_neg = 1'b1;
	pos_neg = #180000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

dsf_timer_vlg_sample_tst tb_sample (
	.areset(areset),
	.clk(clk),
	.data(data),
	.enable(enable),
	.pos_neg(pos_neg),
	.trigger(trigger),
	.sampler_tx(sampler)
);

dsf_timer_vlg_check_tst tb_out(
	.count(count),
	.q(q),
	.sampler_rx(sampler)
);
endmodule

